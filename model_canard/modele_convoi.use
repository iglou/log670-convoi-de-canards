model Convoi

enum Direction { Gauche, Droite }

class Canard
attributes
	id : Integer
end

-- Ne peut aller que sur une travée asphaltée
class CanardObese < Canard
end

-- Ne peut aller que sur des routes mouillées
class CanardPlastique < Canard
end

class Obstacle
attributes
	positionX : Integer
end

class ObstacleFixe < Obstacle
end

class ObstacleMobile < Obstacle
attributes
	vitesse : Integer
operations
	changementVitesse(v : Integer)
end

class Travee
attributes
	est_mouillee : Boolean
end

class TraveeAsphaltee < Travee
end

class TraveeEnGarnotte < Travee
end

class Route
operations
	tick()
	changementTravee(c : Convoi, t : Travee, d : Direction)
		pre tIsPresent: self.travees->includes(t)
		pre cIsPresent: t.convoi = c
		pre mouvementGauchePossible: d = Direction::Gauche implies self.travees->indexOf(t) > 0
		pre mouvementDroitePossible: d = Direction::Droite implies self.travees->indexOf(t) < self.travees->size() - 1
		pre aucuneCollision:
			let n = self.travees->indexOf(t) in
			let m = if d = Direction::Gauche then n - 1 else n + 1 endif in
			let t2 = self.travees->at(m) in
			t2.obstacles->forAll(o | o.positionX <> c.positionX) -- vérifier les colisions dans la travee #2
		pre autorisationMamanObese: 
			(c.maman.oclIsKindOf(CanardObese) implies not t.oclIsKindOf(TraveeEnGarnotte))
		pre autorisationMamanPlastique: 
			(c.maman.oclIsKindOf(CanardPlastique) implies t.est_mouillee = true)
		pre autorisationCannetonObese: 
			(c.canards->forAll(can | can.oclIsKindOf(CanardObese) implies not t.oclIsKindOf(TraveeEnGarnotte)))
		pre autorisationCannetonPlastique: 
			(c.canards->forAll(can | can.oclIsKindOf(CanardPlastique) implies t.est_mouillee = true))
end

class Convoi
attributes
	positionX : Integer
	espacement : Integer
	vitesse : Integer
operations
  avance()
  longueur() : Integer = self.espacement * (self.canards->size() + 1)
end

composition est_constitue_de between
  Convoi[1] role contient -- Comment faire pour ne pas que Canard ait une relation vers Convoi?
  Canard[1..*] role canards ordered
end

aggregation est_dirige_par between
  Convoi[1] role dirige_par
  Canard[1] role maman
end

association contient between
	Route[1]
	Travee[1..*] role travees ordered
end

association comporte between
	Travee[1]
	Obstacle[0..*] role obstacles
end

association contient2 between
	Travee[1]
	Convoi[1] role convoi
end
--
-- Contraintes

constraints

context Convoi inv vitesse_LE_50:
	self.vitesse<=50

context Convoi inv taille_LT_10:
	self.canards->size <10
	
context ObstacleMobile inv vitesse_LE_60:
	self.vitesse<=60

context TraveeEnGarnotte inv neContientPasObese:
  not self.convoi->isEmpty() implies 
    not self.convoi.maman.oclIsKindOf(CanardObese)
    and
    self.convoi.canards->forAll(c | not c.oclIsKindOf(CanardObese))

context Travee inv mouilleeContientUniquementPlastique:
  (not self.convoi->isEmpty() and self.est_mouillee) implies self.convoi.canards->forAll(c | c.oclIsKindOf(CanardPlastique))
