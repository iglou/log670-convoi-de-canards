model Convoi

enum Direction { Gauche, Droite }

class Canard
attributes
	id : Integer
end

-- Ne peut aller que sur une travée asphaltée
class CanardObese < Canard
end

-- Ne peut aller que sur des routes mouillées
class CanardPlastique < Canard
end

class Obstacle
attributes
	positionX : Integer
end

class ObstacleFixe < Obstacle
end

class ObstacleMobile < Obstacle
attributes
	vitesse : Integer
operations
	changementVitesse(v : Integer)
end

class Travee
attributes
	est_mouillee : Boolean
end

class TraveeAsphaltee < Travee
end

class TraveeEnGarnotte < Travee
end

class Route
operations
	tick()
	changementTravee(c : Convoi, t : Travee, d : Direction)
		pre tIsPresent: self.travees->includes(t)
		pre cIsPresent: t.convoi = c
		pre mouvementGauchePossible: d = Direction::Gauche implies self.travees->indexOf(t) > 0
		pre mouvementDroitePossible: d = Direction::Droite implies self.travees->indexOf(t) < self.travees->size() - 1
		pre aucuneCollision:
			let n = self.travees->indexOf(t) in
			let m = if d = Direction::Gauche then n - 1 else n + 1 endif in
			let t2 = self.travees->at(m) in
			true -- vérifier les colisions dans la travee #2
		pre autorisationMamanObese: 
			(c.maman.oclIsKindOf(CanardObese) implies t.oclIsKindOf(TraveeAsphaltee))
		pre autorisationMamanPlastique: 
			(c.maman.oclIsKindOf(CanardPlastique) implies t.est_mouillee = true)
		--pre autorisationCannetonObese: 
		--	(c.canards->forall(c.canards.oclIsKindOf(CanardObese) implies t.oclIsKindOf(TraveeAsphaltee)))
		--pre autorisationCannetonPlastique: 
		--	(c.canards->forall(c.canards.oclIsKindOf(CanardPlastique) implies t.est_mouillee = true))
end

class Convoi
attributes
	positionX : Integer
	espacement : Integer
	vitesse : Integer
operations
  avance()
end

composition est_constitue_de between
  Convoi[1] role contient -- Comment faire pour ne pas que Canard ait une relation vers Convoi?
  Canard[1..*] role canards ordered
end

aggregation est_dirige_par between
  Convoi[1] role dirige_par
  Canard[1] role maman
end

association contient between
	Route[1]
	Travee[1..*] role travees ordered
end

association comporte between
	Travee[1]
	Obstacle[0..*] role obstacles
end

association contient2 between
	Travee[1]
	Convoi[1] role convoi
end
--
-- Contraintes

constraints

context Convoi inv:
	self.vitesse<=50

context Convoi inv:
	self.canards->size <10
	
context ObstacleMobile inv:
	self.vitesse<=50

context TraveeEnGarnotte inv:
	not self.convoi.maman.oclIsKindOf(CanardObese)
	and
	self.convoi.canards->forAll(c | not c.oclIsKindOf(CanardObese))

context Travee inv:
	self.est_mouillee
	and
	self.convoi.canards->forAll(c | c.oclIsKindOf(CanardPlastique))
	
--context Route::changementTravee(c : ) 
--	pre aucuneColision:    n.size() = 12

--Pour avancer, tous les canards du convoi doivent pouvoir avancer sur la travée.
--context Travee inv:
--if self.convoi.maman->isObese
--then
--	self.convoi->avance implies self->isAsphaltee
--else
--	if self.convoi.maman->isPlastique
--	then
--		self.convoi->avance implies self->est_mouillee
--	else
--		self.convoi->avance
--	endif
--endif

--self.convoi.canards->forall(c : Canard | 
--	if c->isObese
--	then
--		self.convoi->avance implies self->isAsphaltee
--	else
--		if c->isPlastique
--		then
--			self.convoi->avance implies self->est_mouillee
--		endif
--	endif
--)

--Lors d’un changement de travée, tous les canards du convoi doivent être autorisé à marcher sur la nouvelle travée.
--context Route inv:
--if self.travees.convoi.maman->isObese
--then
--	self->changementTravee implies self.travee->isAsphaltee
--else
--	if self.travees.convoi.maman->isPlastique
--	then
--		self->changementTravee implies self.travee->est_mouillee
--	else
--		self->changementTravee
--	endif
--endif

--self.travees.convoi.canards->forall(c : Canard | 
--	if c->isObese
--	then
--		self->changementTravee implies self.travees->isAsphaltee
--	else
--		if c->isPlastique
--		then
--			self->changementTravee implies self.travees->est_mouillee
--		endif
--	endif)
