model Convoi

class Canard
attributes
	id : Integer
end

-- Ne peut aller que sur une travée asphaltée
class CanardObese < Canard
end

-- Ne peut aller que sur des routes mouillées
class CanardPlastique < Canard
end

class Obstacle
attributes
	positionX : Integer
end

class ObstacleFixe < Obstacle
end

class ObstacleMobile < Obstacle
attributes
	vitesse : Integer
operations
	changementVitesse(v : Integer)
end

class Travee
attributes
	est_mouillee : Boolean
end

class TraveeAsphaltee < Travee
end

class TraveeEnGarnotte < Travee
end

class Route
operations
	tick()
	changementTravee(c : Convoi, gauche : Boolean)
end

class Convoi
attributes
	positionX : Integer
	espacement : Integer
	vitesse : Integer
operations
  avance()
end

composition est_constitue_de between
  Convoi[1] role contient -- Comment faire pour ne pas que Canard ait une relation vers Convoi?
  Canard[1..*] role canards ordered
end

aggregation est_dirige_par between
  Convoi[1] role dirige_par
  Canard[1] role maman
end

association contient between
	Route[1]
	Travee[1..*] role travees
end

association comporte between
	Travee[1]
	Obstacle[0..*] role obstacles
end

association contient2 between
	Travee[1]
	Convoi[1] role convoi
end
--
-- Contraintes

constraints

context Convoi inv:
	self.vitesse<=50

context ObstacleMobile inv:
	self.vitesse<=50

context TraveeEnGarnotte inv:
	not self.convoi.maman.oclIsKindOf(CanardObese)
	and
	self.convoi.canards->forAll(c | not c.oclIsKindOf(CanardObese))

--Pour avancer, tous les canards du convoi doivent pouvoir avancer sur la travée.
--context Travee inv:
--if self.convoi.maman->isObese
--then
--	self.convoi->avance implies self->isAsphaltee
--else
--	if self.convoi.maman->isPlastique
--	then
--		self.convoi->avance implies self->est_mouillee
--	else
--		self.convoi->avance
--	endif
--endif

--self.convoi.canards->forall(c : Canard | 
--	if c->isObese
--	then
--		self.convoi->avance implies self->isAsphaltee
--	else
--		if c->isPlastique
--		then
--			self.convoi->avance implies self->est_mouillee
--		endif
--	endif
--)

--Lors d’un changement de travée, tous les canards du convoi doivent être autorisé à marcher sur la nouvelle travée.
--context Route inv:
--if self.travees.convoi.maman->isObese
--then
--	self->changementTravee implies self.travee->isAsphaltee
--else
--	if self.travees.convoi.maman->isPlastique
--	then
--		self->changementTravee implies self.travee->est_mouillee
--	else
--		self->changementTravee
--	endif
--endif

--self.travees.convoi.canards->forall(c : Canard | 
--	if c->isObese
--	then
--		self->changementTravee implies self.travees->isAsphaltee
--	else
--		if c->isPlastique
--		then
--			self->changementTravee implies self.travees->est_mouillee
--		endif
--	endif)
